{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN9gBPZDl1H6/gA58aemKgh"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"OpItoxdzsD03","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684776423315,"user_tz":-300,"elapsed":25429,"user":{"displayName":"Ghayoor Ali","userId":"06938659148818136919"}},"outputId":"ffb5e431-ee53-45a3-b8ab-e1439b19473d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4619,"status":"ok","timestamp":1684776427916,"user":{"displayName":"Ghayoor Ali","userId":"06938659148818136919"},"user_tz":-300},"id":"yW8BJGBImsob","outputId":"f5f6aa65-ebbc-4e50-feb5-35a3cdb1c293"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: flask in /usr/local/lib/python3.10/dist-packages (2.2.4)\n","Requirement already satisfied: Werkzeug>=2.2.2 in /usr/local/lib/python3.10/dist-packages (from flask) (2.3.0)\n","Requirement already satisfied: Jinja2>=3.0 in /usr/local/lib/python3.10/dist-packages (from flask) (3.1.2)\n","Requirement already satisfied: itsdangerous>=2.0 in /usr/local/lib/python3.10/dist-packages (from flask) (2.1.2)\n","Requirement already satisfied: click>=8.0 in /usr/local/lib/python3.10/dist-packages (from flask) (8.1.3)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from Jinja2>=3.0->flask) (2.1.2)\n"]}],"source":["!pip install flask\n"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"K7-jbSbmmvO4","executionInfo":{"status":"ok","timestamp":1684776432864,"user_tz":-300,"elapsed":4981,"user":{"displayName":"Ghayoor Ali","userId":"06938659148818136919"}}},"outputs":[],"source":["from flask import Flask, jsonify, request\n","import tensorflow as tf\n","import cv2\n","import numpy as np"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"aKMI5QxqmwCN","executionInfo":{"status":"ok","timestamp":1684776432866,"user_tz":-300,"elapsed":35,"user":{"displayName":"Ghayoor Ali","userId":"06938659148818136919"}}},"outputs":[],"source":["app = Flask(__name__)"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"gXI4iaCEssWB","executionInfo":{"status":"ok","timestamp":1684776432867,"user_tz":-300,"elapsed":34,"user":{"displayName":"Ghayoor Ali","userId":"06938659148818136919"}}},"outputs":[],"source":["MODEL_PATH ='/content/drive/MyDrive/predict.h5'"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"LuTKXf64m7SK","executionInfo":{"status":"ok","timestamp":1684776432869,"user_tz":-300,"elapsed":32,"user":{"displayName":"Ghayoor Ali","userId":"06938659148818136919"}}},"outputs":[],"source":["model = MODEL_PATH\n","labels = ['Healthy', 'Soybean_Mosaic_Virus', 'Soybean_Yellow_Mosaic_Virus', 'Other_Disease']"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"numE94ngm_1V","executionInfo":{"status":"ok","timestamp":1684776432871,"user_tz":-300,"elapsed":32,"user":{"displayName":"Ghayoor Ali","userId":"06938659148818136919"}}},"outputs":[],"source":["def preprocess_image(image):\n","    img = cv2.resize(image, (224, 224))\n","    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n","    img = img / 255.0\n","    img = np.expand_dims(img, axis=0)\n","    return img"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"C1u5Q1swnKoJ","executionInfo":{"status":"ok","timestamp":1684776432873,"user_tz":-300,"elapsed":31,"user":{"displayName":"Ghayoor Ali","userId":"06938659148818136919"}}},"outputs":[],"source":["def model_predict(image):\n","    img = preprocess_image(image)\n","    preds = model.predict(img)\n","    preds = np.argmax(preds, axis=1)\n","    prediction = labels[preds[0]]\n","    if preds == 0:\n","        preds = \"Healthy\"\n","        infected_area = None\n","    elif preds == 1:\n","        preds = \"Soybean_Mosaic_Virus\"\n","        hsv = cv2.cvtColor(img[0], cv2.COLOR_RGB2HSV)\n","        lower_green = np.array([40, 50, 50])\n","        upper_green = np.array([80, 255, 255])\n","        mask = cv2.inRange(hsv, lower_green, upper_green)\n","        kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5, 5))\n","        mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)\n","        total_pixels = np.sum(mask == 255)\n","        infected_area_percentage = (total_pixels / (mask.shape[0] * mask.shape[1])) * 100\n","        infected_area = {\n","            'percentage': infected_area_percentage,\n","            'image': cv2.cvtColor(cv2.bitwise_and(img[0], img[0], mask=mask), cv2.COLOR_BGR2RGB)\n","        }\n","    elif preds == 2:\n","        preds = \"Soybean_Yellow_Mosaic_Virus\"\n","        hsv = cv2.cvtColor(img[0], cv2.COLOR_RGB2HSV)\n","        lower_yellow = np.array([20, 100, 100])\n","        upper_yellow = np.array([40, 255, 255])\n","        mask = cv2.inRange(hsv, lower_yellow, upper_yellow)\n","        kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5, 5))\n","        mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)\n","        total_pixels = np.sum(mask == 255)\n","        infected_area_percentage = (total_pixels / (mask.shape[0] * mask.shape[1])) * 100\n","        infected_area = {\n","            'percentage': infected_area_percentage,\n","            'image': cv2.cvtColor(cv2.bitwise_and(img[0], img[0], mask=mask), cv2.COLOR_BGR2RGB)\n","        }\n","    else:\n","        preds = \"Other_Disease\"\n","        infected_area = None\n","    return prediction,infected_area_percentage"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"i_bm-LXoolSR","executionInfo":{"status":"ok","timestamp":1684776434706,"user_tz":-300,"elapsed":15,"user":{"displayName":"Ghayoor Ali","userId":"06938659148818136919"}}},"outputs":[],"source":["@app.route('/predict', methods=['GET','POST'])\n","def predict():\n","    if 'image' not in request.files:\n","        return jsonify({'error': 'No image found'})\n","\n","    image = request.files['image'].read()\n","    npimg = np.frombuffer(image, np.uint8)\n","    img = cv2.imdecode(npimg, cv2.IMREAD_COLOR)\n","\n","    prediction = model_predict(img)\n","\n","    # Calculate infected area percentage here...\n","\n","    response = {\n","        'prediction': prediction,\n","        'infected_area_percentage': infected_area_percentage, \n","    }\n","\n","    return jsonify(response)"]},{"cell_type":"code","source":["if __name__ == '__main__':\n","    app.run(debug=True)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uzhCdEqfy_2Z","outputId":"accf3c98-9f10-4581-827c-a87c1bdebdb1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":[" * Serving Flask app '__main__'\n"," * Debug mode: on\n"]},{"output_type":"stream","name":"stderr","text":["INFO:werkzeug:\u001b[31m\u001b[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\u001b[0m\n"," * Running on http://127.0.0.1:5000\n","INFO:werkzeug:\u001b[33mPress CTRL+C to quit\u001b[0m\n","INFO:werkzeug: * Restarting with stat\n"]}]}]}